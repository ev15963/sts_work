스프링 프레임워크 : DI X AOP 컨테이너를 중심으로 스프핑 MVC와 스프링 JDBC등을 포함하는 스프링의 대명사 제품

DI : 의존성 주입 IOC : 제어의 역행
AOP : 관점지향프로그래밍 

spring  대규모
유지보수 편리 전체구조가 MVC 패턴
(그외 알아둘것 : single tone / factory)

spring 사용방법
1. eclipse + spring 관련.jar
    WebContent => WEB-INF-> lib
2. eclipse + spring plug-in
   elclipse Market place => STS 검색 및 설치

1,2는 개발자가 관리 Frame Work 개발

3. STS (Spring Tool Suite)

3은 Maven이 관리 pom.xml을 이용함 : springFramework 이용

4. IntelliJ -> Gradle로 관리 => 통합시스템 만들 때 (통합 : Java R python 이종간 언어를 통합) => aws ( : infra 구축 )
    (tool)

hosting : 월정액
AWS : 종량제 (사용한 만큼만 지불)
* 중요하지 않음

JSP -> python 으로 뒤바꾸는 경우가 많음 JangDo

R-> application (markdown) cf) html은 markup

DI => class 결합도 ↓ (의존성) = 독립적

DI 이용
1. Java Code
Data Class

2. xml 문서를 이용 => 주로 수업때 사용

3. annotation 이용 ex) @ webServlet

AOP : 관점지향 (모듈 개발)

DI -> xml 문서
<beans - beans 태그 안에서 다양한 bean 태그가 올 수 있음, 파일명 바꿔서 상관없음
                                    필수	패키지.클래스명
	<bean id=	class=			필요없는 속성까지 만듦
		ref=	 new 패키지.클래스명이 id로 들어감
	<bean name=	class=			요청시점에서 만듦
			 new 패키지.클래스명이 name으로 들어감
</beans>


Servlet
WEB-INF => web.xml
<web-app~
	<servlet>
		<servlet-name> ~ </servlet-name>
		<servlet-class> 패키지.클래스 </servlet-name>
	</servlet>

	<servlet-mapping>
			<servlet-name> ~ </servlet-name>
			<url parttern> 외부 요청 주문 </url parttern>
	<servlet-mapping>
<web-app>

database 관련 framework : mybatis 
1. 환경설정에 관련된 DB 접속환경 xml
2. SQL xml

cf) 웹프로젝트 뿐만 아니라 순수java에서도 사용가능 (인프라 구축 시)



Web project

사용자  web browser -> 요청 (protocal, was 주소, 요청)

protocal
http:  모바일 mms

https:

ftp:

was주소
-> 서버주소 (ip번호 도메인명)

도메인명 www.~~~.~~~
모바일 m.---.--- -> 한달 (웹표준) 엔진 자체가 다름

URL 패턴명
~.jsp?_________
~do?_________

웹프로젝트 추세

1. 웹표준 필수 -> html 5 css3/ jQuery		~.html, ~.js, ~.css 파일은 나줘서 별도로 관리

2. Front => ~.jsp (html 보다 jsp 사용) 웹주소줄에 ~.jsp x

3. back-end => controller

4. DB =>DAO /VO (spring에선 DTO 대신 사용) => mybatis에선 DAO 개념이 달라짐 dao 쪽에선 query가 없어짐 자동으로 리스트로 반환(select 구문이 필요 없어짐)
보험홈페이지 (가입약관시 보안작용)



-----------------------------------------------


html 4 tag

html 5	시맨틱 태그 도입 (검색속도 향상)
=> 웹표준 ->
        ↓
PhoneGap
↓      ↓
ios androd

<header> : 현재 페이지에 대한			<input type> required (의무작성), readonly (수정불가능)
<section> : 페이지의 주요 내역 (포털의 뉴스 내역)
<article> : 문서, 페이지, 애플리케이션, 또는 사이트 안에서 독립적으로 구분해 배포하거나 재사용할 수 있는 구획을 나타냅니다. 사용 예제로 게시판과 블로그 글, 매거진이나 뉴스 기사 등이 있습니다.
<aside>: 구역을 나뉨 (해당구역과 관련 없는 컨텐츠)
<nav> : 서비스 네비게이터 메뉴
<footer> : 개인정보 관리
cf) <doctpye html4 ~ 작성시 지원 안됨


OpenGL ES <canvas>  그래프 그림 가능

현대자동차, 기아자동차 통합 모바일 프레임워크 개발중 (2년전부터)

모바일 : manifest, web-storge 인터넷 끊김시 유지

기업 => 별도의 app x

프론트엔트 지원시 - jquery, React.js, +@ vue.js

data 전달 방법 ~.html-> jsp web 주소줄이 변경되는지 안되는지 확인
	html 태그		javascript
1. HTML	1. <form>	2. ajax()		JSP		
	<a href
	일반 전송	: name	전송 후 결과값 반환
2. HTML	1. <form>	2. ajax()		Servlet
			ajax의 성공여부
			done()
3. JSP	1. sendredfuect (~ ?[])		JSP
	2. include /forward
4. Serlvet	  <-------------------------------->	Serlvet
		RequestDispather()
		* forward()
		include()

SpringFrameWork

0. jsp <% %> <%= %> request.getParameter()

1. EL ${	} //스프링때도 사용

2. ActionTag : useBean, setProperty, getProperty

useBean : id= class=

setProperty : name= 멤버변수 value=

getProperty : name= 멤버변수

Bean 클래스 

기본생성자 멤버 (private)

get : 자동완성
set

3.JSTL.jar core / fmt / xml /sql (mybatis 때문에)



------------------------------------------------------


url 패턴명
https://www.chubb.com/kr-kr/		- 홈페이지
https://www.chubb.com/kr-kr/personal/	- 홈페이지 > 개인보험
https://www.acedirect.co.kr/servlets/common/commonForward.ace?target=pc/main/main&layout=type1 - 홈페이지 > 에이스다이렉트
							파라미터	= 값	    파리미터 = 값
z.index로 메뉴 위로 뜸 (slideup, slidedown)
spring에서 사용x serlvet 

대규모 프로젝트 : 입찰  시스템
건강보험 민원24
통계청

기업형 갤럭시 스마트폰 판매량

삼성그룹 총
계열사 프로젝트 통합 주식
전자 디스플레이

대규모 빅데이터 

단점

요청

project 폴더


자료

웹프로젝트 기본구조
웹애플리케이션과 그 설계 이론

기본적인 웹 시스템의 구조는

정적인 컨텐츠 : 클라이언트 머신의 웹 브러우저가 네트워크에 있는 웹 서버(정적인 컨텐츠르르 저장하는 서버)로부터 요청한
HTML을 읽어와 표시하면 된다.

동적인 컨텐츠 : 웹 서버에서
애플리케이션서버(웹 서버의 요구에 따라 컨텐츠를 동적으로 생성하는 서버)에 처리를 요청하고
대부분은 RDB에서 데이트를 읽어오거나 가공하면 그 처리 결과를 웹 서버에서 받아 웹브라우져에 표시한다.

현재는 Ajax를 이용하면서 풍부한 회면을 웹브라우저로 구현할 수 있게 되었고

RDB 대신 KVS(key에 의한 Value [데이터]를 저장, 관리하는 방식)가 사용되거나
클라이언트가 스마트폰이거나
서비스의 실체가 클라우드 안에 숨어있어
단순히 인터넷상의 서비스 (예) 메일이나 SNS 서비스가 그렇다)로 존재할 떄도 있다.

기본적인 동작은 위에서 설명한대로

복수의 사용자가 인터넷을 통해 데이터베이스에 접근하고
안전하게 정보를 읽고 쓸 수 있게 만들어진
웹 브라우져와 RDB를 이용한 애플리케이션 ==> 웹 애플리케이션의 정의

정적 콘텐츠뿐만 아니라 동적으로 콘텐츠를 처리한 CGI는 세션관릭 되지 않으므로 성능 저하나 트랜잭션의 어려움이 있었다.


관계형 DB Oracle (거의 장악)
	My SQL
	MS-SQL
	Access


그래서 등장한 것이 JSP, Servlet이다.

멀테스레드로 실행되고
JSP, Serlvet의 실행기반인 컨테이너는 개발자가 세션관리를 의식하지 않게끔 세션관리를 의식하지 않게끔 세션관리를 해

또한 비즈니스 로직이 섞여있던 CGI와 달리, JSP로 페이지를 생성하고 Servlet으로 생성하고 

EJB는 분산됨 EJB컴포넌트를 마치 같은 머신에 있는 것처럼 엑세스할 수 있게 하거나
분산된 데이터베이스의 트랜젝션을 마치 하나의 데이터베이스만 있는 것처럼 제어할 수 있는 분산처리와 분산 트랜젝션의 융한 컴포넌트로 탄생한 기술




EJB발전의 근원은 CORBA인데
CORBA가 벤터 각자의 생각으로 상호운용성을 잃으면서
상호운용성을 확보하기 위해 나타난 기술

이런 EJB가
웹 어플리케이션용 재사용 가능한 컴포넌트나
SQL 기술이 필요 없는 DB엑세스 프레임워크가 되면서 
JSP와 Servlet으로 프레젠테이션을 구현하고
비지니스 로직은 EJB로 구현하는 것이 
웹 어플리케이션의 권장 설계가 되었다.

그런데 웹 어플리케이션은 분산처리를 거의 사용하지 않고
EJB컨테이너가 테스트하기 어렵고 사양도 복잡해
결국 스프링프레임워크의 탄생을 가져오게 된다.

Rod Johnsom이 점차 무거워지는 J2EE컨테이너를 대신할 경량 컨테이너로 스프링을 고안해낸다.

분산처리
예) 네이버 구글 => 검색 엔진
         ↓    ↓
data : web문서
단어 -> 문장 -> 맥락 -> 감정(개인화)
검색

분산처리 -> 그리드 (격자) 방식 -> 클라우드 방식



경량 컨테이너
POJO(Plain Old Java Object)로 불리는 컨테이너와
프레임워크등에 의존하지 않는 일발 오브젝트의 생애주기 관리나
오프젝트 간의 의존관계를 해결하는 아키텍쳐를 구현한 컨테이너를 말한다.

애플리케이션 아키텍처 (전체적인 시스템 구조)

애플리케이션 전체 구조 공통된 방식(메카니즘)으롤 정의되며,
시스템의 애플리케이션이 공통으로 이용할 수 있는
사용자 인터페이스 구조나 데이터베이스 접근 방식 등 시스템의 기반이 되는 부분을 말한다.


애플리케이션 아키텍처의 목표

개발효율
의도를 파악하기 쉽고 이해하기 쉬운 구조 (예) spring mvc 구조)
테스트를 쉽게 할 수 있는 구조 j-unit (완성본/ 테스트용 코드)

유연성 (interface)
변경하기 쉽고 기능을 추가하기 쉬운 구조
미래의 환경 변황 대응할 수 있는 견고한 구조

객체 변경 편함

애플리케이션 아키텍쳐는 간단히 이해할 수 있고 간단히 사용할 수 있어야 한다.

우리가 지향하는 웹 애플리케이션 개발에서는
사용자의 요구와
개발자, 운영자의 요구라는
두 가지 목표를 만족하는 애플리케이션 아키텍쳐가
프레임워크나 라이브러리로 구현되어 매뉴얼과 함께 초기 개발단계에서 개발자에게 제공된다.



구체적으로 어떤 구조와 기술로 어떻게 설계하면 좋을 지 설명한다.

웹 어플리케이션의 아키텍쳐는 크게 물리층인 티어와 논리층인 레이어로 나누어진다.

물리층 (티어)
	클라이언트층(PC, 스마트폰)-중간층(애플리케이션서버)-EIS층(DB, 레거 시스템)
논리층 (레이어)
	기본적으로 중간층에 있는 웹 어플리케이션을 논리적으로 분류


+추가

프레젠테이션층
UI와 컨트롤러 제공 이층에는 클래스 이름으로 Controller나 Action이 붙은 클래스가 놓이다.

비즈니스로직층
클래스 이름 끝에 Service가 붙은 유스케이스를 제어하는 클래스나
회사, 종업원, 주문등 업무대상 이름이 붙은 클래스가 놓인다.

데이터액세스층
데이터베이스 액세스를 추상화한다. 이층의 클래스 이름 끝에 DAO가 붙은 클래스가 놓인다.

컨트롤러 : 
화면전환이나 화면에서 버튼이 눌렀을 때의 동작제어나 세션관리 등을 한다.

jsp servlet


-------------------------------------

비지니스로직-서비스(애플리케이션)
유스케이스로 표현되는 특정업무나
특정부서처리의 통합
트랜잭션의 기점
일반적으로 stateless(자신의 상태를 나타내는 값을 가지지 않는다) 클래스

비지니스로직 도메인
서버로부터 비지니스 실행하는데 있어
당연히 인식되는 고객이나 주문 같은 클래스의 집합이다.
자신이 무엇인지 나타내는 값과 그 값을 이용한 처리를 실현한다.


프레젠테이션 층의 역할
사용자 인터페이스와 컨트롤러의 제공이다.

컨트롤러의 가장 중요한 직업은
웹 어플리케이션으 상태(세션)로 저장해 이용하는 데이터를 관리하는 것이다.
컨트롤러는 일반적으로 MVC2라고 불리는 JSP모델의 컨트롤러로 알려졌다.

스몰토크에서 확립된 MVC패턴을 참고
Model부분에 JavaBean(또는 EJB), view부분에 JSP, controller부분에는 Servlet을 사용

정리하면 결국 애플리케이션을 부품화하자는 말이다.
부품이 큰 쪽은 티어나 레이어가 되고 그 보다 작은 부품은 패키지나 컴포넌트가 된다.

그리고 부품끼리는 인터페이스로 연결된다.
요컨데 부품화라고 할 수 있다.

리모컨, 프로젝터, 스크린 : 레이어
컴포넌트, 패키지 : 필터 랜즈


인터페이스의 두가지 포인트

인터페이스를 어느 쪽이 가질 것인가.
인터페이스는 꽂을 구멍이 있는 쪽, 자바로 말하면 Interface의 정의가 있는 쪽이 어느 쪽(중요한 쪽)
어느 정도 까지 부품화하면 좋은가
	부품화할 필요가 있는 것만 부품화한다.


스프링 프레임워크는
무겁게 동작하던 J2EE와 다르게 가볍게 동작하도록 제작되었고
의존성주입(Dependency Injection)과
관점지향프로그램(Aspect Oriented Programming)기능을 포함하여 주목 받았다.

그 외에 다양한 프로젝트를 포함
Spring MVC (웹애플리케이션 MVC 프레임워크)
Spring Batch(배치처리용 프레임워크)
Spring Security(인증, 허가 프레임워크)
Spring Integration(시스템 연계 프레임워크)
Spring Data(데이터 접근 추상화 프레임워크)

스프링 부트는
자주 사용하려는 프로젝트 조합 준비, 설정을 자동으로 수행, 서버 포함하고 있다.
	=> 개발자가 적은 양의 애플리케이션 코드를 작성해서 바로 실행 할 수 있다.
	=> 드롭위저드(비슷한 개념으로 만들어진 프레임워크)보다 많은 예제와 자료가 있다.
	=> 웹어플리케이션 뿐 아니라 명령행 인터페이스(CLI, Command Line Interface)에서 동작하는
	     콘솔 프로그램이나 배치(Batch)프로그램을 만들때도 사용


*logback
.log4j 기반으로 성능은 10배빠르고 메모리 사용량은 적다.
로그 설정 변경 시 재시작 없이 바로 적용됨
구현체로 slf4j(Simple Logging Facede for Java)를 함께 사용

trace : 모든로그 출력
debug : 개발할 때 디버그 용도로 사용
info : 상태 변경 등과 같은 정보서 메시즈를 나타냄
warn : 프로그램의 실행에는 문제가 없지만 추후 시스템 에러의 원인이 될 수 있다는
error : 요청을 처리하던 중 문제가 발생한 것을 의미

스프링 인터셉터는
어떤 URI를 호출했을 때
해당 요청의 컨트롤러가 처리되기 전 또는 후에 작업을 하기 위해 사용된다.
이러한 역할은 필터(filter)와 인터셉터(intercepter)로 수행할 수 있다.
기능적인 면에서 필터와 인터셉터는 상당히 비슷하다.

필터는
디스패치 서블릿 앞 단에서 동작

인터셉터는 디스패치 서블릿에서 핸들러 컨트롤러로 가기 전에 동작

필터는
J2EE표준 스팩에 있는 서블릿 기능 중 하나.

인터셉터는 스프링 프레임워크에서 제공되는 기능이므로 스프링 빈을 사용할 수 있다.

일반적으로
문자열 인코딩과 같은 웹 전반에서 사용되는 기능은 필터로 구현하고
클라이언트의 요청관 관련이 있는 여러 가진 처리(예를 들어 로그인이나 인증, 권한 등)은 인터셉트에서 구현

객체지향의 4대 특성 : 

캡슐화 : 정보은닉
상속 : 재사용
추상화 : 모델링
다형성 : 사용편의

추상화는 구체적인 것을 분해해서
관찰자가 관심있는 특성만 가지고 재 조합하는 것이라고 정리 할 수 있다.

클래스 : 객체
=팽귄: 뽀로로
=사람:김연아
=쥐:미키마우스

추상화란
구체적인 것을 분해해서 관심영역(애플리케이션 경계, application boundary)에 있는 특정

모델은
실제 사물을 정확히 복제하는 것이 아니라
목적에 맞게 관심 있는 특성만을 추출해서 표현하는 것이다.
바로 모델은 추상화를 통해 실제 사물을 단순하게 묘사하는 것이다.

상속을 통한 추상화, 구체화
인테페이스를 통한 추상화
다형성을 통한 추상화

이름		다른 이름					사는 곳[메모리]
static 변수	클래스[멤버]속성, 정적 변수, 정적 속성		스태틱 영역
인스턴스 변수	객체[멤버]속성, 객체변수			힙영역
local 변수	지역변수					스택영역


상속은
부모-자식 관계가 아니다
이제는 상위-하위클래스 또는 슈퍼-서브클래스로 표현하자.

객체지향의 상속의 의미

객체지향의 상속은 확장과 세분화

조직도나 계층도가 아니라 분류도이다.
상속에서 반드시 만족해야 되는 질무능로 하위클래스는 상위클래스이다.

아버지는 할아버지다. (X) -> 고래는 포유류이다.(O)

클래스명은 클래스 답게 = 분류스럽게
객체참조 변수명은 유일 무이한 사물처럼 작명해야한다.

객체 is 클래스 ==> 객체 is a kind of 클래스
뽀로로 is a 펭귄 : 뽀로로는 한마리의 펭귄이다.
==> 펭귄 is a kind of 조류 : 펭귄은 조류의 한 분류다.

객체지향의 상속은 상위클래스의 특성을 재사용하는 것이다.
객체지향의 상속은 상위클래스의 특성을 확장하는 것이다.
객체지향의 상속은 is a kind of 관계를 만족해야 한다.


인터페이스는 
be able to, 즉 "무엇을 할 수 있는"이라는 표현 형태로 만드는 것이 좋다.

객체지향에서 다형성으라고 하면
오버라이딩(overrding)과 오버로딩(overloading)이라고 할 수 있다.
ride: 올라타다
load : 적재하다.

오버라이딩을 통한 메서드 재정의
오버로딩을 통한 메서드 중복정의를 통해서 다형성을 제공하고 있다.


구현도 일종의 상속
오버로딩은 상속개념이 없다.

오버라이딩을 통한 메서드 재정의
오버로딩을 통한 메서드 중복정의를 통해서 다형성을 제공하고 있다.

캡슐화 : 정보은닉
자바에서 정보은닉(information hiding)이라고 하면
접근제어자 private, [default], protected, public
그리고, 접근자 및 설정자 메서드


추상클래스 : 
인스턴스, 즉 객체를 만들 수 없다.  즉 new를 사용할 수 없다.

추상메서드
하위클래스에게 메서드의 구현을 강제한다. 오버라이딩 강제

추상메서드를 포함하는 클래스는
반드시 추상클래스여야 한다.

추상클래스
abstract class ex) extends
interface

implements

public void a();

자바jdk 1.8 부터 
람다 표현식

람다란
함수를 의미하고, 변수에 할당 할 수 있다.
함수는 로직이므로, 삼단논법으로 변수에 저장할 수 있는 로직이다.

변수 : 
값을 저장하고, 메소드의 인자를 쓰일 수 있고
메서드의 반환 값으로 사용할 수 있다.

람다로 인해 변수에 로직을 저장할 수 있고
로직을 메서드의 인자를 쓸 수 있고
로직을 메서드의 변환 값으로 사용할 수 있다.

람다는 인터페이스를 기초로 하고 있다.

다른 언어와 비교한다면

C/C++: 함수 포인터
C# : 델리게이트(Delegate)
자바스크립트 : 함수를 저장하는 변수 / 함수 인자로 callback을 전달

1. SRP(Single Responsibilty Pronciple) : 단일 책임 원칙
2. OCP(Open Closed Principle) : 개방 폐쇄 원칙
3. LSP(Liskov Sustitution Principle) : 리스코브 치환 원칙
4. ISP(Interface Segregation Principle) : 인터페이스 분리 원칙
5. DIP(Dependency Inversion Principle) : 의존역전 법칙

좋은 소프트웨어 설계를 위해서는 
결합도(coupling)은 낮추고 응집도(cohesion)는 높이는 것이 좋다.

---------------------

결합도는 
모듈(클래스)간의 상호 의존 정도로서
결합도가 낮으면 모듈간의 상호 의존성이 줄어들어
객체의 재사용이나 수정, 유지보수가 용이하다.

응집도
하나의 모듈내부에 존재하는 구성요소들의 기능적 관련성으로
응집도가 높은 모듈은 하나의 책임에 집중하고 독립성이 높아져
재사용이나 기능의 수정, 유지, 보수가 용이해진다.

SRP-단일 책임 원칙
역할과 첵임에 따라 분리하여 각각 하나의 역할과 책임만 갖게 하자는 것
클래스 뿐만 아니라 속성, 메서드, 패키지, 모듈, 컴포넌트, 프래이워크 등에서 적용할 수 있다.

단일 책임과 가장 관계가 깊은 것은 바로 모델링 과정을 담당하는 추상화.
설계 및 리팩토링시에도 단일 책임 원칙을 상기하자

## 리팩토링

OCP-개방 폐쇄 원칙

"소프트웨어 엔티티(클래스, 모듈, 함수 등)은 확장에 대해서는 열려있어야 하지만 변경에 대해서는 닫혀있어야 한다. (로버트 C.마틴)

개방 폐쇄의 원칙의 아주 좋은 예는 JDBC이다.
데이터 베이스가 오라클에서 MySQL로 바뀌더라고
Connection을 설정하는 부분 외에는 따로 수정할 필요가 없다.

자바 개발자는 각 운영체제 별 JVM과 목적파일(.class)가 있기에
다양한 환경에 대해서는 걱정하지 않고, 
본인이 작업하고 있는 개발 PC에 설치된 JVM에서 구동되는 코드만 작성하면 된다.

편의점의 판매인터페이스를 통해서
"""손님은 편의점 직원의 역할이나, 변경에 영향을 받지 않게 된다.""" by 역할에 대한 폐쇄성

이 개방 폐쇄의 원칙의 좋은 예가 스프핑 프레임 워크이다.

mysql이나 oracle 용어가 조금씩 다르기 때문에..


LSP 리스코프 치환법칙

"서브타입은 언제나 자신의 기반 타입으로 교체할 수 있어야한다." (로버트 C.마틴)
- 하위클래스는 is a kind of 상위 클래스 : 하위 분류는 상위 분류의 한 종류다.
- 구현클래스는 is usable to 인터페이스 : 구현분류는 인터페이스 할 수 있어야 한다.

A b = new B();
B bb=(B)b;

ISP - 인터페이스 분리 법칙
"클라이언트는 자신이 사용하지 않는 메서드에 의존 관계를 맺으면 안된다." (로버트 C.마틴)

단일 책임 원칙과 인터페이스 분할 법칙은 같은 문제에 대한 다른 해결방식이며, 
단일 책임 원칙으로 적용하는 것이 더 좋은 해결책이다.

인터페이스는 최소조의 원칙을 지키는 것이 좋다.
(상위 클래스는 풍성할 수 록 좋고, 인터페이스는 작을수록 좋다.)
빈약한 상위 클래스를 이용할 경우
상속의 혜택을 제대로 누리지 못하게 된다.)

Object a = new B();
class A{}
class B extends A{}
class C extends B{}

DIP 의존 역전 법칙

"추상화된 것은 구체적인 것에 의존하면 안된다.
구체적인 것이 추상화된 것에 의존해야 한다."

"자주 변경되는 구체(concrete)클래스에 의존하지 마라" (로버트 C.마틴)

스노우 타이어에 의존하던 자동차에 타어어 인터페이스를 두고
인터페이스에 스노우타이어, 일반타이어, 광폭타이어 등을 둠으로써
개방폐쇄원칙(OCP)를 적용하고 나면
스노우타이어가 타이어에 의존하는 의존의 방향이 역전하는 현상이 나타난다.
//implement 타이어 (타이어를 추상화)
이처럼 자신보다 변하기 쉬운 것에 의존하던 것을
추상화된 인터페이스나 상위클래스를 두어
변하기 쉬운 것의 변화에 영향 받지 않게 하는 것이 의존 역전 법칙이다.

생성자 인젝션 이용 69~79

setter 인젝션 이용 80~85

어노페이션을 이용한 주입방식 93

어노테이션과 xml을 섞어 사용한 방식 104

비즈니스 컴포넌트 실습 109

Service 구현 클래스 124

비즈니스 컴포넌트 UserService 129~140

일주일에 day1

추석전까지 ~64 페이지 자기 것으로 만들기